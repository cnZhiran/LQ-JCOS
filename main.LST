C51 COMPILER V9.00   MAIN                                                                  11/17/2019 21:38:53 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <STC15F2K60S2.H>
   2          #include <intrins.h>
   3          #include <string.h>
   4          #include <stdio.h>
   5          #include <onewire.h>
   6          #include <iic.h>
   7          
   8          #ifndef u8
   9          #define u8 unsigned char
  10          #endif
  11          
  12          #ifndef u16
  13          #define u16 unsigned int
  14          #endif
  15          
  16          #ifndef u32
  17          #define u32 unsigned long
  18          #endif
  19          
  20          sbit Trig = P1^0;
  21          sbit Echo = P1^1;
  22          
  23          u8 code font[10]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
  24          u8 code y4=0x80,y5=0xa0,y6=0xc0,y7=0xe0;
  25          
  26          bit temp_flag=0,len_flag=0,break_flag=0,echo_flag=0,tx_flag=0;
  27          bit temp_mod=0;len_mod=1;
  28          u8 dis[8]={0},tx_buf[16]="\0",rx_buf[16]="\0";
  29          u8 key_flag=0,key_sign=0,tx_pot=0,rx_pot=0;
  30          u16 temp_timing=0,len_timing=250;
  31          u16 count=0,len=20,key_count=0;
  32          int temp=20;
  33          
  34          void mod_init();
  35          void mod_ctrl();
  36          void read_temp();
  37          void read_len();
  38          u8 scankey();
  39          void send_str();
  40          void dis_smg();
  41          
  42          /*************************************************
  43          *函数：mod_init()系统模式初始化函数
  44          *功能：系统模式初始化
  45          *************************************************/
  46          void mod_init(){
  47   1              if(temp_mod){
  48   2                      dis[0]=0xc6;
  49   2                      dis[1]=0xff;
  50   2                      dis[2]=0xff;
  51   2                      dis[3]=0xff;
  52   2                      return;
  53   2              }
  54   1              if(len_mod){
  55   2                      dis[0]=0xc7;
C51 COMPILER V9.00   MAIN                                                                  11/17/2019 21:38:53 PAGE 2   

  56   2                      dis[1]=0xff;
  57   2                      dis[2]=0xff;
  58   2                      return;
  59   2              }
  60   1      }
  61          /*************************************************
  62          *函数：Sysclk_init()系统计时初始化函数
  63          *功能：系统计时初始化
  64          *硬件：使用T2定时器，规定1ms溢出中断一次
  65          *************************************************/
  66          void Sysclk_init(){
  67   1              AUXR |= 0x04;           //定时器2时钟1T模式
  68   1              T2L = 0x20;                     //设置定时初值
  69   1              T2H = 0xD1;                     //设置定时初值
  70   1          IE2 |= 0x04;                //开定时器2中断
  71   1          EA = 1;
  72   1              AUXR |= 0x10;           //定时器2开始计时
  73   1      }
  74          /*************************************************
  75          *函数：PCA_init()PCA定时器初始化函数
  76          *功能：PCA定时器初始化                   
  77          *硬件：使用PCA定时器，规定溢出和P11下降沿中断
  78          *************************************************/
  79          void PCA_init(){
  80   1              P_SW1 &= 0xcf;          //(P1.2/ECI, P1.1/CCP0, P1.0/CCP1, P3.7/CCP2)
  81   1          CCON = 0;                       //初始化PCA控制寄存器
  82   1                                          //PCA定时器停止
  83   1                                          //清除CF标志
  84   1                                          //清除模块中断标志
  85   1          CL = 0;                         //复位PCA寄存器
  86   1          CH = 0;
  87   1          CCAP0L = 0;
  88   1          CCAP0H = 0;
  89   1          CMOD = 0x01;                    //设置PCA时钟源为系统时钟/12,且使能PCA计时溢出中断
  90   1          CCAPM0 = 0x10;                                      //PCA模块0为16位捕获模式(下降沿捕获,可测从低电平开始的整个周期)
  91   1              
  92   1          EA = 1;
  93   1      
  94   1      }
  95          /*************************************************
  96          *函数：Uart_init()串口初始化函数
  97          *功能：串口初始化 
  98          *硬件：使用T1定时器，波特率为4800
  99          *************************************************/
 100          void Uart_init(void)            //4800bps@12.000MHz
 101          {
 102   1              SCON = 0x50;            //8位数据,可变波特率
 103   1              AUXR |= 0x40;           //定时器1时钟为Fosc,即1T
 104   1              AUXR &= 0xFE;           //串口1选择定时器1为波特率发生器
 105   1              TMOD &= 0x0F;           //设定定时器1为16位自动重装方式
 106   1              TL1 = 0x8F;                     //设定定时初值
 107   1              TH1 = 0xFD;                     //设定定时初值
 108   1              ET1 = 0;                        //禁止定时器1中断
 109   1              ES = 1;
 110   1              EA = 1;
 111   1              TR1 = 1;                        //启动定时器1
 112   1      }
 113          /*************************************************
 114          *函数：delay_us()微秒级延时函数
 115          *功能：微秒级延时服务
 116          *备注：尽可能的使用STC-ISP的延时计算器，提高延时精度
 117          *************************************************/
C51 COMPILER V9.00   MAIN                                                                  11/17/2019 21:38:53 PAGE 3   

 118          void delay100us()               //@12.000MHz
 119          {
 120   1              unsigned char i, j;
 121   1      
 122   1              i = 2;
 123   1              j = 39;
 124   1              do
 125   1              {
 126   2                      while (--j);
 127   2              } while (--i);
 128   1      }
 129          void delay12us()                //@12.000MHz
 130          {
 131   1              unsigned char i;
 132   1      
 133   1              _nop_();
 134   1              _nop_();
 135   1              i = 33;
 136   1              while (--i);
 137   1      }
 138          /*************************************************
 139          *函数：init()初始化函数
 140          *功能：系统进入的初始化服务
 141          *************************************************/
 142          void init(){
 143   1              mod_init();
 144   1              Trig = 0;
 145   1              Echo = 1;
 146   1              PCA_init();
 147   1              Sysclk_init();
 148   1              Uart_init();
 149   1      }
 150          /*************************************************
 151          *函数：loop()快速响应函数
 152          *功能：快速I/O设备的驱动服务，模式变换服务
 153          *备注：要求函数进行一次的时长要尽可能的短，这样不会影响其他函数的延时等待函数。
 154          *************************************************/
 155          void loop(){
 156   1              key_sign=scankey();
 157   1              mod_ctrl();
 158   1              dis_smg();
 159   1      }
 160          /*************************************************
 161          *函数：soft_IT()中断捕获和处理函数
 162          *功能：中断捕获和处理服务
 163          *************************************************/
 164          void soft_IT(){
 165   1              
 166   1              if(temp_flag) read_temp();
 167   1              if(len_flag) read_len();
 168   1      }
 169          /*************************************************
 170          *函数：mod_ctrl()模式变换函数
 171          *功能：模式变换服务
 172          *************************************************/
 173          void mod_ctrl(){
 174   1              if(temp_mod){
 175   2                      if(key_sign==12){
 176   3                              temp_mod=0;
 177   3                              len_mod=1;
 178   3                              dis[0]=0xc7;
 179   3                              dis[1]=0xff;
C51 COMPILER V9.00   MAIN                                                                  11/17/2019 21:38:53 PAGE 4   

 180   3                              dis[2]=0xff;
 181   3                              if(count==0){
 182   4                                      dis[3]=font[9];
 183   4                                      dis[4]=font[9];
 184   4                                      dis[5]=font[9];
 185   4                                      dis[6]=font[9]&0x7f;
 186   4                                      dis[7]=font[9];
 187   4                              }else{
 188   4                                      len=count*0.17;
 189   4                                      dis[3]=font[len/10000];
 190   4                                      dis[4]=font[len/1000%10];
 191   4                                      dis[5]=font[len/100%10];
 192   4                                      dis[6]=font[len/10%10]&0x7f;
 193   4                                      dis[7]=font[len%10];
 194   4                              }
 195   3                              return;
 196   3                      }
 197   2              }
 198   1              if(len_mod){
 199   2                      if(key_sign==12){          
 200   3                              len_mod=0;
 201   3                              temp_mod=1;
 202   3                              dis[0]=0xc6;
 203   3                              dis[1]=0xff;
 204   3                              dis[2]=0xff;
 205   3                              dis[3]=0xff;
 206   3                              dis[4]=font[temp/1000%10];
 207   3                              dis[5]=font[temp/100%10]&0x7f;
 208   3                              dis[6]=font[temp/10%10];
 209   3                              dis[7]=font[temp%10];
 210   3                              return;
 211   3                      }
 212   2              }
 213   1      }
 214          /*************************************************
 215          *函数：read_temp()读温度函数
 216          *功能：读取温度
 217          *************************************************/
 218          void read_temp(){
 219   1              int tp;
 220   1              u8 tl,th;
 221   1      
 222   1              while(init_ds18b20())loop();
 223   1              Write_DS18B20(0xCC);
 224   1              Write_DS18B20(0x44);
 225   1              while(init_ds18b20())loop();
 226   1              Write_DS18B20(0xCC);
 227   1              Write_DS18B20(0xBE);
 228   1              tl=Read_DS18B20();
 229   1              th=Read_DS18B20();
 230   1              tp=(th<<8)|tl;
 231   1              temp=tp*6.25;
 232   1      
 233   1              if(temp_mod){
 234   2                      dis[4]=font[temp/1000%10];
 235   2                      dis[5]=font[temp/100%10]&0x7f;
 236   2                      dis[6]=font[temp/10%10];
 237   2                      dis[7]=font[temp%10];
 238   2              }
 239   1              temp_flag=0;
 240   1      
 241   1      }       
C51 COMPILER V9.00   MAIN                                                                  11/17/2019 21:38:53 PAGE 5   

 242          /*************************************************
 243          *函数：read_len()读距离函数
 244          *功能：读取距离
 245          *************************************************/
 246          void read_len(){
 247   1              u8 i=8;
 248   1                                
 249   1              //发送
 250   1              while(i--){
 251   2                      Trig = 1;
 252   2                      delay12us();
 253   2                      Trig = 0;
 254   2                      delay12us();
 255   2              }
 256   1              //接收
 257   1          CR = 1;                         //PCA定时器开始工作
 258   1          CCF0 = 0;
 259   1              CCAPM0 |= 0x01;                                 //开启中断
 260   1              while(echo_flag!=0&&break_flag!=0)loop();
 261   1              if(len_mod){
 262   2                      if(break_flag){
 263   3                              dis[3]=font[9];
 264   3                              dis[4]=font[9];
 265   3                              dis[5]=font[9];
 266   3                              dis[6]=font[9]&0x7f;
 267   3                              dis[7]=font[9];
 268   3                      }else{
 269   3                              len=count*0.17;
 270   3                              dis[3]=font[len/10000];
 271   3                              dis[4]=font[len/1000%10];
 272   3                              dis[5]=font[len/100%10];
 273   3                              dis[6]=font[len/10%10]&0x7f;
 274   3                              dis[7]=font[len%10];
 275   3                      }
 276   2              }
 277   1              break_flag = 0;
 278   1              echo_flag = 0;
 279   1              len_flag = 0;
 280   1      } 
 281          /*************************************************
 282          *函数：send_str()发送字符串函数
 283          *功能：向串口发送字符串
 284          *************************************************/
 285          void send_str(){
 286   1              tx_flag = 1;
 287   1              tx_pot = 0;
 288   1          SBUF = tx_buf[tx_pot++];            //写数据到UART数据寄存器
 289   1      }
 290          /*************************************************
 291          *函数：scankey()扫描按键函数
 292          *功能：扫描按键
 293          *************************************************/
 294          u8 scankey(){
 295   1              u8 key;
 296   1      
 297   1              P3=0xff;P3&=0xf3;
 298   1              if(P34==0|P35==0){
 299   2                      delay100us();
 300   2                      if(P34==0|P35==0){
 301   3                              key = P3 &0x30;
 302   3                              if(key_count==0){
 303   4                                      key_count = 1;
C51 COMPILER V9.00   MAIN                                                                  11/17/2019 21:38:53 PAGE 6   

 304   4                                      P3=0xff;P3&=0xcf;
 305   4                                      delay12us();
 306   4                                      key |= P3 &0x0c;
 307   4                                      switch(key){
 308   5                                              case 0x14:key_flag=12;return 0;
 309   5                                              case 0x18:key_flag=13;return 0;
 310   5                                              case 0x24:key_flag=16;return 0;
 311   5                                              case 0x28:key_flag=17;return 0;
 312   5                                      }
 313   4                              }
 314   3                              return 0;
 315   3                      }       
 316   2              }
 317   1              if(key_count){
 318   2                      if(key_count<1000){
 319   3                              key_count=0;
 320   3                              return key_flag;
 321   3                      }else{
 322   3                              key_count=0;
 323   3                              return key_flag+10;
 324   3                      }
 325   2              }
 326   1              return 0;
 327   1      }
 328          /*************************************************
 329          *函数：dis_smg()数码管显示函数
 330          *功能：驱动显示数码管
 331          *************************************************/
 332          void dis_smg(){
 333   1              u8 i;
 334   1      
 335   1              for(i=0;i<8;i++){
 336   2                      P2&=0x1f;
 337   2                      P0=1<<i;
 338   2                      P2|=y6;
 339   2                      _nop_();
 340   2                      P2&=0x1f;
 341   2                      P0=dis[i];
 342   2                      P2|=y7;
 343   2                      delay100us();
 344   2                      P0=0xff;
 345   2              }
 346   1      }
 347          /*************************************************
 348          *函数：main()系统进入函数
 349          *功能：系统进入初始化服务，系统进行服务
 350          *************************************************/
 351          void main(){
 352   1              //初始化
 353   1              init();
 354   1              while(1){
 355   2                      //快速I/O操作
 356   2                      loop();
 357   2                      //中断检查与处理
 358   2                      soft_IT();
 359   2              }       
 360   1      }
 361          /*************************************************
 362          *函数：Uart()串口中断处理函数
 363          *功能：软件中断标志的定时置位服务，毫秒级的计时计数服务
 364          *硬件：使用T2定时器，规定1ms溢出中断一次
 365          *************************************************/
C51 COMPILER V9.00   MAIN                                                                  11/17/2019 21:38:53 PAGE 7   

 366          void Uart() interrupt 4 using 2
 367          {
 368   1          if (RI){
 369   2              RI = 0;                 //清除RI位
 370   2              rx_buf[rx_pot] = SBUF;//存串口数据
 371   2                      if(rx_buf[rx_pot]=='?'){
 372   3                              rx_pot = 0;
 373   3                      }else if(rx_buf[rx_pot]=='\n'){
 374   3                              rx_buf[++rx_pot] ='\0';
 375   3                              rx_pot++;
 376   3                                              
 377   3                              //请尽量在此处添加接收串口字符串的函数
 378   3                              if(strcmp(rx_buf,"temp\r\n")==0){ 
 379   4                                      while(tx_flag) loop();
 380   4                                      sprintf(tx_buf,"temp:%.2f\n",temp/100.0);
 381   4                                      send_str();
 382   4                              }
 383   3                              rx_pot = 0; 
 384   3                              
 385   3                      }else{
 386   3                              if(++rx_pot>=15) rx_pot = 0;
 387   3                      }
 388   2          }
 389   1          if (TI){
 390   2              TI = 0;                 //清除TI位
 391   2              if(tx_buf[tx_pot]){
 392   3                      SBUF = tx_buf[tx_pot];                 //写数据到UART数据寄存器
 393   3                              if(++tx_pot>=15) tx_pot=0;
 394   3                      }else{
 395   3                              tx_pot = 0;
 396   3                              tx_flag = 0;
 397   3                      }
 398   2          }
 399   1      }
 400          /*************************************************
 401          *函数：PCA_isr()PCA定时器中断处理函数
 402          *功能：脉冲时长计数服务
 403          *硬件：使用PCA定时器，规定溢出和P11下降沿中断
 404          *输出：count记录从定时器打开到下降沿之前的时长计数
 405          *************************************************/
 406          void PCA_isr() interrupt 7 using 3
 407          {       
 408   1          if (CF)
 409   1          {
 410   2              CF = 0;                                         //定时器溢出中断
 411   2              break_flag=1;
 412   2          }
 413   1          if (CCF0)
 414   1          {
 415   2                      CCF0 = 0;
 416   2                      echo_flag = 1;
 417   2                      count=(CCAP0H<<8)|CCAP0L;       //保存本次的捕获值
 418   2                      CCAPM0 &= 0xfe;                         //关闭中断
 419   2              CR = 0;                                         //PCA定时器停止工作
 420   2                      CL = 0;                     //复位PCA寄存器
 421   2                      CH = 0;
 422   2                      CCAP0L = 0;
 423   2                      CCAP0H = 0;
 424   2                      
 425   2          }
 426   1      }
 427          /*************************************************
C51 COMPILER V9.00   MAIN                                                                  11/17/2019 21:38:53 PAGE 8   

 428          *函数：Sysclk_IT()系统定时中断处理函数
 429          *功能：软件中断标志的定时置位服务，毫秒级的计时计数服务
 430          *硬件：使用T2定时器，规定1ms溢出中断一次
 431          *************************************************/
 432          void Sysclk_IT() interrupt 12 using 3
 433          {
 434   1              //18B20定时读取
 435   1              if(temp_timing){
 436   2                      temp_timing--;
 437   2              }else{
 438   2                      temp_timing=500;
 439   2                      temp_flag=1;
 440   2              }
 441   1              //超声波定时读取
 442   1              if(len_timing){
 443   2                      len_timing--;
 444   2              }else{
 445   2                      len_timing=1000;
 446   2                      len_flag=1;
 447   2              }
 448   1              //按键时长计数
 449   1              if(key_count){
 450   2                      if(++key_count==0)key_count=1000;
 451   2              }
 452   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1544    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     58       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
