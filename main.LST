C51 COMPILER V9.59.0.0   MAIN                                                              01/06/2020 21:46:31 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <STC15F2K60S2.H>
   2          #include <intrins.h>
   3          #include <string.h>
   4          #include <stdio.h>
   5          #include <onewire.h>
   6          #include <iic.h>
   7          
   8          #ifndef u8
   9          #define u8 unsigned char
  10          #endif
  11          
  12          #ifndef u16
  13          #define u16 unsigned int
  14          #endif
  15          
  16          #ifndef u32
  17          #define u32 unsigned long
  18          #endif
  19          
  20          #define temp_mod 0
  21          #define len_mod 1
  22          #define vol_mod 2
  23          #define bright_mod 3
  24          
  25          #define len_read_IT   //len_read_once一次性读距离，len_read_IT发读分离法读距离
  26          
  27          
  28          sbit Trig = P1^0;
  29          sbit Echo = P1^1;
  30          
  31          u8 code font[10]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
  32          u8 code y4=0x80,y5=0xa0,y6=0xc0,y7=0xe0;
  33          
  34          u8 bdata led=0,out=0;
  35          bit temp_flag=0,len_flag=0,vol_flag=0,bright_flag=0,break_flag=0,echo_flag=0,tx_flag=0,rx_flag=0;
  36          u8 idata mod_flag=len_mod,dis[8]={0},tx_buf[16]="init_well\r\n",rx_buf[16]="\0";
  37          u8 idata key_flag=0,key_sign=0,tx_pot=0,rx_pot=0,cnt=0;
  38          u16 idata length=0,key_count=0,temp_timing=250,vol_timing=125,len_timing=0,bright_timing=375,delay_timing=
             -0;
  39          u16 len=20,vol=250,bright=250;
  40          int temp=20;
  41          
  42          sbit l1=led^0;
  43          sbit l2=led^1;
  44          sbit l3=led^2;
  45          sbit l4=led^3;
  46          sbit l5=led^4;
  47          sbit l6=led^5;
  48          sbit l7=led^6;
  49          sbit l8=led^7;
  50          sbit relay=out^4;
  51          sbit buzz=out^6;
  52          
  53          void mod_init();
  54          void mod_ctrl();
C51 COMPILER V9.59.0.0   MAIN                                                              01/06/2020 21:46:31 PAGE 2   

  55          void read_temp();
  56          #ifdef len_read_once
              void read_len();
              #elif defined len_read_IT 
  59          void send_len();
  60          void read_len();
  61          #endif
  62          void read_vol();
  63          void read_bright();
  64          void scankey();
  65          void send_str();
  66          void uart_reply();
  67          void dis_smg();
  68          void dis_led();
  69          void dis_out();
  70          
  71          /*************************************************
  72          *函数：mod_init()系统模式初始化函数
  73          *功能：系统模式初始化
  74          *************************************************/
  75          void mod_init(){
  76   1        u8 i;
  77   1        
  78   1        switch(mod_flag){
  79   2        case temp_mod:
  80   2          dis[0]=0xc6;
  81   2          dis[1]=0xff;
  82   2          dis[2]=0xff;
  83   2          dis[3]=0xff;
  84   2          dis[4]=font[temp/1000%10];
  85   2          dis[5]=font[temp/100%10]&0x7f;
  86   2          dis[6]=font[temp/10%10];
  87   2          dis[7]=font[temp%10];
  88   2          for(i=3;dis[i]==font[0];i++) dis[i]=0xff;
  89   2          if(temp<0) dis[i-2]=0xbf;
  90   2          return;
  91   2        case len_mod:
  92   2          dis[0]=0xc7;
  93   2          dis[1]=0xff;
  94   2          dis[2]=0xff;
  95   2          if(length==0){
  96   3            dis[3]=font[9];
  97   3            dis[4]=font[9];
  98   3            dis[5]=font[9];
  99   3            dis[6]=font[9]&0x7f;
 100   3            dis[7]=font[9];
 101   3          }else{
 102   3            dis[3]=font[len/10000];
 103   3            dis[4]=font[len/1000%10];
 104   3            dis[5]=font[len/100%10];
 105   3            dis[6]=font[len/10%10]&0x7f;
 106   3            dis[7]=font[len%10];
 107   3            for(i=3;dis[i]==font[0];i++) dis[i]=0xff;
 108   3          }
 109   2          return;
 110   2        case vol_mod:
 111   2          dis[0]=0xc1;
 112   2          dis[1]=0xff;
 113   2          dis[2]=0xff;
 114   2          dis[3]=0xff;
 115   2          dis[4]=0xff;
 116   2          dis[5]=font[vol/100%10]&0x7f;
C51 COMPILER V9.59.0.0   MAIN                                                              01/06/2020 21:46:31 PAGE 3   

 117   2          dis[6]=font[vol/10%10];
 118   2          dis[7]=font[vol%10];
 119   2          return;
 120   2        case bright_mod:
 121   2          dis[0]=0x83;
 122   2          dis[1]=0xff;
 123   2          dis[2]=0xff;
 124   2          dis[3]=0xff;
 125   2          dis[4]=0xff;
 126   2          dis[5]=font[bright/100%10]&0x7f;
 127   2          dis[6]=font[bright/10%10];
 128   2          dis[7]=font[bright%10];
 129   2          return;
 130   2        }
 131   1      }
 132          /*************************************************
 133          *函数：Sysclk_init()系统计时初始化函数
 134          *功能：系统计时初始化
 135          *硬件：使用T2定时器，规定1ms溢出中断一次
 136          *************************************************/
 137          void Sysclk_init(){
 138   1        AUXR |= 0x04;   //定时器2时钟1T模式
 139   1        T2L = 0x20;     //设置定时初值
 140   1        T2H = 0xD1;     //设置定时初值
 141   1        IE2 |= 0x04;    //开定时器2中断
 142   1        EA = 1;
 143   1        AUXR |= 0x10;   //定时器2开始计时
 144   1      }
 145          /*************************************************
 146          *函数：PCA_init()PCA定时器初始化函数
 147          *功能：PCA定时器初始化       
 148          *硬件：使用PCA定时器，规定溢出和P11下降沿中断
 149          *************************************************/
 150          void PCA_init(){
 151   1        P_SW1 &= 0xcf;    //(P1.2/ECI, P1.1/CCP0, P1.0/CCP1, P3.7/CCP2)
 152   1        CCON = 0;                       //初始化PCA控制寄存器
 153   1                                        //PCA定时器停止
 154   1                                        //清除CF标志
 155   1                                        //清除模块中断标志
 156   1        CL = 0;                         //复位PCA寄存器
 157   1        CH = 0;
 158   1        CMOD = 0x01;                    //设置PCA时钟源,允许溢出中断
 159   1        CCAPM0 = 0x11;                  //PCA模块0为下降沿触发,开启中断。
 160   1        EA = 1;
 161   1      }
 162          /*************************************************
 163          *函数：Uart_init()串口初始化函数
 164          *功能：串口初始化 
 165          *硬件：使用T1定时器，波特率为4800
 166          *************************************************/
 167          void Uart_init(void)    //4800bps@12.000MHz
 168          {
 169   1        SCON = 0x50;    //8位数据,可变波特率
 170   1        AUXR |= 0x40;   //定时器1时钟为Fosc,即1T
 171   1        AUXR &= 0xFE;   //串口1选择定时器1为波特率发生器
 172   1        TMOD &= 0x0F;   //设定定时器1为16位自动重装方式
 173   1        TL1 = 0x8F;     //设定定时初值
 174   1        TH1 = 0xFD;     //设定定时初值
 175   1        ET1 = 0;      //禁止定时器1中断
 176   1        ES = 1;
 177   1        EA = 1;
 178   1        TR1 = 1;      //启动定时器1
C51 COMPILER V9.59.0.0   MAIN                                                              01/06/2020 21:46:31 PAGE 4   

 179   1      
 180   1        send_str();
 181   1      }
 182          /*************************************************
 183          *函数：delay_us()微秒级延时函数
 184          *功能：微秒级延时服务
 185          *备注：尽可能的使用STC-ISP的延时计算器，提高延时精度
 186          *************************************************/
 187          void delay100us()   //@12.000MHz
 188          {
 189   1        unsigned char i, j;
 190   1      
 191   1        i = 2;
 192   1        j = 39;
 193   1        do
 194   1        {
 195   2          while (--j);
 196   2        } while (--i);
 197   1      }
 198          void delay12us()    //@12.000MHz
 199          {
 200   1        unsigned char i;
 201   1      
 202   1        _nop_();
 203   1        _nop_();
 204   1        i = 33;
 205   1        while (--i);
 206   1      }
 207          /*************************************************
 208          *函数：init()初始化函数
 209          *功能：系统进入的初始化服务
 210          *************************************************/
 211          void init(){
 212   1        mod_init();
 213   1        Trig = 0;
 214   1        Echo = 1;
 215   1        PCA_init();
 216   1        Sysclk_init();
 217   1        Uart_init();
 218   1      }
 219          /*************************************************
 220          *函数：loop()快速响应函数
 221          *功能：快速I/O设备的驱动服务，模式变换服务
 222          *备注：要求函数进行一次的时长要尽可能的短，这样不会影响其他函数的延时等待函数。
 223          *************************************************/
 224          void loop(){
 225   1        scankey();
 226   1        mod_ctrl();
 227   1        dis_smg();
 228   1        dis_led();
 229   1        dis_out();
 230   1      }
 231          /*************************************************
 232          *函数：soft_IT()中断捕获和处理函数
 233          *功能：中断捕获和处理服务
 234          *************************************************/
 235          void soft_IT(){
 236   1        
 237   1        if(temp_flag) read_temp();
 238   1        if(vol_flag) read_vol();
 239   1        if(bright_flag) read_bright();
 240   1        #ifdef len_read_once
C51 COMPILER V9.59.0.0   MAIN                                                              01/06/2020 21:46:31 PAGE 5   

                if(len_flag) read_len();
                #elif defined len_read_IT
 243   1        if(len_flag) send_len();
 244   1        if(echo_flag||break_flag) read_len();
 245   1        #endif
 246   1        if(rx_flag) uart_reply();
 247   1      }
 248          /*************************************************
 249          *函数：mod_ctrl()模式变换函数
 250          *功能：模式变换服务
 251          *************************************************/
 252          void mod_ctrl(){
 253   1        if(key_sign==4){
 254   2          mod_flag=len_mod;
 255   2        }else if(key_sign==5){
 256   2          mod_flag=temp_mod;
 257   2        }else if(key_sign==8){;
 258   2          mod_flag=vol_mod;
 259   2        }else if(key_sign==9){
 260   2          mod_flag=bright_mod;
 261   2        }
 262   1        key_sign = 0;
 263   1        mod_init();
 264   1      }
 265          /*************************************************
 266          *函数：read_temp()读温度函数
 267          *功能：读取温度
 268          *************************************************/
 269          void read_temp(){
 270   1        int tp;
 271   1        u8 tl,th;
 272   1      
 273   1        l1=1;
 274   1        temp_flag=0;
 275   1        while(init_ds18b20())loop();
 276   1        Write_DS18B20(0xCC);
 277   1        Write_DS18B20(0x44);
 278   1        while(init_ds18b20())loop();
 279   1        Write_DS18B20(0xCC);
 280   1        Write_DS18B20(0xBE);
 281   1        tl=Read_DS18B20();
 282   1        th=Read_DS18B20();
 283   1        tp=(th<<8)|tl;
 284   1        temp=tp*6.25;
 285   1      
 286   1        if(mod_flag==temp_mod){
 287   2          dis[4]=font[temp/1000%10];
 288   2          dis[5]=font[temp/100%10]&0x7f;
 289   2          dis[6]=font[temp/10%10];
 290   2          dis[7]=font[temp%10];
 291   2        }
 292   1        l1=0;
 293   1      
 294   1      } 
 295          /*************************************************
 296          *函数：read_len()一次性读距离函数
 297          *功能：读取距离
 298          *************************************************/
 299          #ifdef len_read_once
              void read_len(){
                u8 i=8;
                
C51 COMPILER V9.59.0.0   MAIN                                                              01/06/2020 21:46:31 PAGE 6   

                break_flag = 0;
                echo_flag = 0;
                len_flag = 0;
                //发送
                while(i--){
                  Trig = 1;
                  delay12us();
                  Trig = 0;
                  delay12us();
                }
                CL = 0;
                CH = 0;
                CCF0 = 0;
                CF = 0;
                CR = 1;                 //PCA定时器开始工作
                CCAPM0 |= 0x01;         //开启中断
                while(echo_flag==0&&break_flag==0)loop();
                //接收
                if(break_flag){
                  len=9999;
                  if(mod_flag==len_mod){
                    dis[3]=font[9];
                    dis[4]=font[9];
                    dis[5]=font[9];
                    dis[6]=font[9]&0x7f;
                    dis[7]=font[9];
                  }
                }else if(echo_flag){
                  len=length*0.17;
                  if(mod_flag==len_mod){
                    dis[3]=font[len/10000];
                    dis[4]=font[len/1000%10];
                    dis[5]=font[len/100%10];
                    dis[6]=font[len/10%10]&0x7f;
                    dis[7]=font[len%10];
                    for(i=3;dis[i]==font[0];i++) dis[i]=0xff;
                  }
                }
              } 
              /*************************************************
              *函数：send_len()+read_len()发读分离法读距离函数
              *功能：读取距离
              *************************************************/
              #elif defined len_read_IT
 347          //发送
 348          void send_len(){
 349   1        u8 i=8;
 350   1        
 351   1        break_flag = 0;
 352   1        echo_flag = 0;
 353   1        len_flag = 0;
 354   1        while(i--){
 355   2          Trig = 1;
 356   2          delay12us();
 357   2          Trig = 0;
 358   2          delay12us();
 359   2        }
 360   1        CL = 0;                 //计时器清零
 361   1        CH = 0;
 362   1        CCF0 = 0;               //清标志
 363   1        CF = 0;
 364   1        CR = 1;                 //PCA定时器开始工作
C51 COMPILER V9.59.0.0   MAIN                                                              01/06/2020 21:46:31 PAGE 7   

 365   1        CCAPM0 |= 0x01;         //开启中断
 366   1      }
 367          
 368          //接收
 369          void read_len(){
 370   1        u8 i;
 371   1        
 372   1        if(echo_flag){
 373   2          len=length*0.17;
 374   2          if(mod_flag==len_mod){
 375   3            dis[3]=font[len/10000];
 376   3            dis[4]=font[len/1000%10];
 377   3            dis[5]=font[len/100%10];
 378   3            dis[6]=font[len/10%10]&0x7f;
 379   3            dis[7]=font[len%10];
 380   3            for(i=3;dis[i]==font[0];i++) dis[i]=0xff;
 381   3          }
 382   2        }else if(break_flag){
 383   2          len=9999;
 384   2          if(mod_flag==len_mod){
 385   3            dis[3]=font[9];
 386   3            dis[4]=font[9];
 387   3            dis[5]=font[9];
 388   3            dis[6]=font[9]&0x7f;
 389   3            dis[7]=font[9];
 390   3          }
 391   2        }
 392   1      }
 393          #endif
 394          /*************************************************
 395          *函数：read_vol()读电位器函数
 396          *功能：读取电位器电压
 397          *************************************************/
 398          void read_vol(){
 399   1        l3=1;
 400   1        vol_flag = 0;
 401   1        IIC_Start();
 402   1        IIC_SendByte(0x90);
 403   1        IIC_WaitAck();
 404   1        IIC_SendByte(0x03);
 405   1        IIC_WaitAck();
 406   1        IIC_Start();
 407   1        IIC_SendByte(0x91);
 408   1        IIC_WaitAck();
 409   1        IIC_RecByte();
 410   1        IIC_SendAck(0);
 411   1        vol=IIC_RecByte();
 412   1        vol=vol*500.0/255;
 413   1        IIC_Stop();
 414   1      
 415   1        if(mod_flag==vol_mod){
 416   2          dis[5]=font[vol/100%10]&0x7f;
 417   2          dis[6]=font[vol/10%10];
 418   2          dis[7]=font[vol%10];
 419   2        }
 420   1        if(vol>300){
 421   2          buzz=1;
 422   2        }else{
 423   2          buzz=0;
 424   2        }
 425   1        l3=0;
 426   1      }
C51 COMPILER V9.59.0.0   MAIN                                                              01/06/2020 21:46:31 PAGE 8   

 427          /*************************************************
 428          *函数：read_bright()读亮度函数
 429          *功能：读取光敏电阻电压
 430          *************************************************/
 431          void read_bright(){
 432   1        l4=1;
 433   1        bright_flag = 0;
 434   1        IIC_Start();
 435   1        IIC_SendByte(0x90);
 436   1        IIC_WaitAck();
 437   1        IIC_SendByte(0x01);
 438   1        IIC_WaitAck();
 439   1        IIC_Start();
 440   1        IIC_SendByte(0x91);
 441   1        IIC_WaitAck();
 442   1        IIC_RecByte();
 443   1        IIC_SendAck(0);
 444   1        bright=IIC_RecByte();
 445   1        bright=bright*500.0/255;
 446   1        IIC_Stop();
 447   1      
 448   1        if(mod_flag==bright_mod){
 449   2          dis[5]=font[bright/100%10]&0x7f;
 450   2          dis[6]=font[bright/10%10];
 451   2          dis[7]=font[bright%10];
 452   2        }
 453   1        if(bright>300){
 454   2          relay=1;
 455   2        }else{
 456   2          relay=0;
 457   2        }
 458   1        l4=0;
 459   1      } 
 460          /*************************************************
 461          *函数：send_str()发送字符串函数
 462          *功能：向串口发送字符串
 463          *************************************************/
 464          void send_str(){
 465   1        tx_flag = 1;
 466   1        tx_pot = 0;
 467   1        SBUF = tx_buf[tx_pot++];    //写数据到UART数据寄存器
 468   1      } 
 469          /*************************************************
 470          *函数：uart_reply()串口响应函数
 471          *功能：串口响应接收字符串
 472          *************************************************/
 473          void uart_reply(){
 474   1        l5=1;
 475   1        rx_flag = 0;
 476   1        if(strcmp(rx_buf,"temp\r\n")==0){
 477   2          while(tx_flag) loop();
 478   2          sprintf(tx_buf,"temp:%.2f'C\r\n",temp/100.0);
 479   2          send_str();
 480   2        }else if(strcmp(rx_buf,"len\r\n")==0){
 481   2          while(tx_flag) loop();
 482   2          sprintf(tx_buf,"len:%.1fcm\r\n",len/10.0);
 483   2          send_str();
 484   2        }else if(strcmp(rx_buf,"vol\r\n")==0){
 485   2          while(tx_flag) loop();
 486   2          sprintf(tx_buf,"vol:%.2fV\r\n",vol/100.0);
 487   2          send_str();
 488   2        }else if(strcmp(rx_buf,"bright\r\n")==0){
C51 COMPILER V9.59.0.0   MAIN                                                              01/06/2020 21:46:31 PAGE 9   

 489   2          while(tx_flag) loop();
 490   2          sprintf(tx_buf,"bright:%.2fV\r\n",bright/100.0);
 491   2          send_str();
 492   2        }
 493   1        l5=0;
 494   1      }
 495          /*************************************************
 496          *函数：scankey()扫描按键函数
 497          *功能：扫描按键
 498          *************************************************/
 499          void scankey(){
 500   1        u8 key;
 501   1      
 502   1        P4=0xff;P3=0xff;P3&=0xf3;
 503   1        if(P34==0|P35==0|P42==0|P44==0){
 504   2          if(key_count==0){
 505   3            key_count = 1;
 506   3            key = P3 &0x30;key|=(u8)P42<<6;key|=(u8)P44<<7;
 507   3            P3=0xff;P3&=0xcf;P4=0x00;
 508   3            delay12us();
 509   3            key |= P3 &0x0c;
 510   3            switch(key){
 511   4              case 0x74:key_flag=4;break;
 512   4              case 0x78:key_flag=5;break;
 513   4              case 0xb4:key_flag=8;break;
 514   4              case 0xb8:key_flag=9;break;
 515   4              case 0xd4:key_flag=12;break;
 516   4              case 0xd8:key_flag=13;break;
 517   4              case 0xe4:key_flag=16;break;
 518   4              case 0xe8:key_flag=17;break;
 519   4            }
 520   3          }
 521   2          return;
 522   2        }
 523   1        if(key_count>1000){
 524   2          key_count = 0;
 525   2          key_sign = key_flag +10;
 526   2        }else if(key_count>2){
 527   2          key_count=0;
 528   2          key_sign = key_flag;
 529   2        }else{
 530   2          key_count=0;
 531   2        }
 532   1      }
 533          /*************************************************
 534          *函数：dis_smg()数码管显示函数
 535          *功能：驱动显示数码管
 536          *************************************************/
 537          void dis_smg(){
 538   1        u8 i;
 539   1      
 540   1        for(i=0;i<8;i++){
 541   2          P2&=0x1f;
 542   2          P0=1<<i;
 543   2          P2|=y6;
 544   2          _nop_();
 545   2          P2&=0x1f;
 546   2          P0=dis[i];
 547   2          P2|=y7;
 548   2          delay100us();
 549   2          P0=0xff;
 550   2        }
C51 COMPILER V9.59.0.0   MAIN                                                              01/06/2020 21:46:31 PAGE 10  

 551   1      }
 552          /*************************************************
 553          *函数：dis_led()LED显示函数
 554          *功能：驱动显示LED
 555          *************************************************/
 556          void dis_led(){
 557   1        P2&=0x1f;
 558   1        P0=~led;
 559   1        P2|=y4;
 560   1        P2&=0x1f;
 561   1      }
 562          /*************************************************
 563          *函数：dis_out()OUT显示函数
 564          *功能：驱动显示OUT
 565          *************************************************/
 566          void dis_out(){
 567   1        P2&=0x1f;
 568   1        P0=out;
 569   1        P2|=y5;
 570   1        P2&=0x1f;
 571   1      }
 572          /*************************************************
 573          *函数：main()系统进入函数
 574          *功能：系统进入初始化服务，系统进行服务
 575          *************************************************/
 576          void main(){
 577   1        //初始化
 578   1        init();
 579   1        while(1){
 580   2          //快速I/O操作
 581   2          loop();
 582   2          //中断检查与处理
 583   2          soft_IT();
 584   2        } 
 585   1      }
 586          /*************************************************
 587          *函数：Uart()串口中断处理函数
 588          *功能：软件中断标志的定时置位服务，毫秒级的计时计数服务
 589          *硬件：使用T2定时器，规定1ms溢出中断一次
 590          *************************************************/
 591          void Uart() interrupt 4 using 2
 592          {
 593   1          if (RI){
 594   2            RI = 0;                 //清除RI位
 595   2            rx_buf[rx_pot] = SBUF;//存串口数据
 596   2            if(rx_buf[rx_pot]=='?'){
 597   3              rx_pot = 0;
 598   3            }else if(rx_buf[rx_pot]=='\n'){
 599   3              rx_buf[++rx_pot] ='\0';
 600   3              rx_flag = 1;
 601   3              rx_pot = 0;   
 602   3            }else{
 603   3              if(++rx_pot>=15) rx_pot = 0;
 604   3            }
 605   2          }
 606   1          if (TI){
 607   2            TI = 0;                 //清除TI位
 608   2            if(tx_buf[tx_pot]){
 609   3              SBUF = tx_buf[tx_pot];                 //写数据到UART数据寄存器
 610   3            if(++tx_pot>=15) tx_pot=0;
 611   3          }else{
 612   3            tx_pot = 0;
C51 COMPILER V9.59.0.0   MAIN                                                              01/06/2020 21:46:31 PAGE 11  

 613   3            tx_flag = 0;
 614   3          }
 615   2        }
 616   1      }
 617          /*************************************************
 618          *函数：PCA_isr()PCA定时器中断处理函数
 619          *功能：脉冲时长计数服务
 620          *硬件：使用PCA定时器，规定溢出和P11下降沿中断
 621          *输出：count记录从定时器打开到下降沿之前的时长计数
 622          *************************************************/
 623          void PCA_isr() interrupt 7 using 3
 624          { 
 625   1        if (CCF0){
 626   2          CCF0 = 0;
 627   2          length = (CCAP0H<<8)|CCAP0L;  //保存本次的捕获值
 628   2          echo_flag = 1;
 629   2          CR = 0;                       //PCA定时器停止工作
 630   2          CCAPM0 &= 0xfe;               //关闭中断
 631   2        }
 632   1        if (CF){
 633   2          CF = 0;
 634   2          break_flag = 1;
 635   2          CR = 0;                       //PCA定时器停止工作
 636   2          CCAPM0 &= 0xfe;               //关闭中断
 637   2        }
 638   1      }
 639          /*************************************************
 640          *函数：Sysclk_IT()系统定时中断处理函数
 641          *功能：软件中断标志的定时置位服务，毫秒级的计时计数服务
 642          *硬件：使用T2定时器，规定1ms溢出中断一次
 643          *************************************************/
 644          void Sysclk_IT() interrupt 12 using 3
 645          {
 646   1        //毫秒级延时服务
 647   1        if(delay_timing){
 648   2          delay_timing--;
 649   2        }
 650   1        //18B20定时读取
 651   1        if(temp_timing){
 652   2          temp_timing--;
 653   2        }else{
 654   2          temp_timing=500;
 655   2          temp_flag=1;
 656   2        }
 657   1        //超声波定时读取
 658   1        if(len_timing){
 659   2          len_timing--;
 660   2        }else{
 661   2          len_timing=1000;
 662   2          len_flag=1;
 663   2        }
 664   1        //电位器定时读取
 665   1        if(vol_timing){
 666   2          vol_timing--;
 667   2        }else{
 668   2          vol_timing=500;
 669   2          vol_flag=1;
 670   2        }
 671   1        //光敏电阻定时读取
 672   1        if(bright_timing){
 673   2          bright_timing--;
 674   2        }else{
C51 COMPILER V9.59.0.0   MAIN                                                              01/06/2020 21:46:31 PAGE 12  

 675   2          bright_timing=500;
 676   2          bright_flag=1;
 677   2        }
 678   1        //按键时长计数
 679   1        if(key_count){
 680   2          if(++key_count==0)key_count=1001;
 681   2        }
 682   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2878    ----
   CONSTANT SIZE    =     96    ----
   XDATA SIZE       =      8       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =     60    ----
   BIT SIZE         =      8    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
